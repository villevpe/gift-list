{"version":3,"sources":["webpack:///webpack/bootstrap 7d49fc5767abfa7cf439","webpack:///external \"express\"","webpack:///./src/server/models/list.js","webpack:///./src/server/routes/auth.js","webpack:///external \"compression\"","webpack:///external \"body-parser\"","webpack:///./src/server/config.js","webpack:///./src/server/routes/items.js","webpack:///external \"express-session\"","webpack:///external \"express-static-gzip\"","webpack:///external \"socket.io\"","webpack:///./src/server/content.json","webpack:///./src/server/index.js","webpack:///./src/server/models/storage.js","webpack:///./src/server/models/user.js","webpack:///external \"pg\"","webpack:///external \"pg-format\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA,oC;;;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,2BAA2B;AAC3E;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA,SAAS;;AAET;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACvGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;AChDA,wC;;;;;;ACAA,wC;;;;;;ACAA;;AAEA;AACA,kB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,wB;;;;;;AC3BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,4B;;;;;;ACjEA,4C;;;;;;ACAA,gD;;;;;;ACAA,sC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qEAAqE,kBAAkB;AACvF;;AAEA,CAAC;;;;;;;;AC9BD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,6BAA6B;AAC1D;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA,yB;;;;;;AC3GA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACTA,+B;;;;;;ACAA,sC","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7d49fc5767abfa7cf439","module.exports = require(\"express\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express\"\n// module id = 0\n// module chunks = 0","const Storage = require('./storage');\r\n\r\nconst ERROR_CODES = {\r\n    ALREADY_RESERVED: 'already_reserved',\r\n    ALREADY_REMOVED: 'already_removed',\r\n    TOKEN_OR_ID_MISSING: 'token_or_id_missing',\r\n    TOKEN_RESERVED: 'token_reserved',\r\n    WRONG_TOKEN: 'wrong_token'\r\n};\r\n\r\nclass List {\r\n\r\n    /**\r\n     * Reference for errors\r\n     * @returns {object} error codes\r\n     */\r\n    static get errors() {\r\n        return ERROR_CODES;\r\n    }\r\n\r\n    static ready() {\r\n        return Storage.init();\r\n    }\r\n\r\n    /**\r\n     * Reserves item and saves list\r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {function} success \r\n     * @param {function} error \r\n     */\r\n    static reserveItem(id, token, success, error) {\r\n        console.log(\"ITEMS: Trying to reserve \" + id + \" with token \" + token);\r\n        Storage.get().then(items => {\r\n            if (tokenIsReserved(items)) {\r\n                error(ERROR_CODES.TOKEN_RESERVED);\r\n            } else {\r\n                saveItem();\r\n            }\r\n\r\n            function saveItem() {\r\n                let position = items.findIndex(item => item.id === id);\r\n                let item = items[position];\r\n                if (isUnreserved()) {\r\n                    Storage\r\n                        .updateReservation(id, token, true)\r\n                        .then(items => success({ item: item, items: items }))\r\n                        .catch(exception => error(exception.toString()));\r\n\r\n                } else {\r\n                    error(ERROR_CODES.ALREADY_RESERVED);\r\n                }\r\n\r\n                function isUnreserved() {\r\n                    return item && item.reserved === false;\r\n                }\r\n            }\r\n\r\n            function tokenIsReserved(items) {\r\n                return items.find(item => item.id === id && item.reserved === true);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unreserves item and saves list\r\n     * @param {string} id \r\n     * @param {string} token \r\n     * @param {function} success \r\n     * @param {function} error \r\n     */\r\n    static unreserveItem(id, token, success, error) {\r\n        console.log(\"ITEMS: Trying to unreserve \" + id + \" with token \" + token);\r\n        Storage.get().then(items => {\r\n            let itemIndex = findItemIndexByToken();\r\n            if (itemIndex > -1) {\r\n                unreserve();\r\n            } else {\r\n                error(ERROR_CODES.WRONG_TOKEN);\r\n            }\r\n\r\n            function findItemIndexByToken() {\r\n                return items.findIndex(item => item.id === id && item.reserved === true && item.token === token);\r\n            }\r\n\r\n            function unreserve() {\r\n                Storage\r\n                    .updateReservation(id, '', false)\r\n                    .then(items => success({ items: items }))\r\n                    .catch(exception => error(exception.toString()));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * @returns {Promise<Object>} list of items\r\n     */\r\n    static getList() {\r\n        return Storage.get();\r\n    }\r\n}\r\n\r\nmodule.exports = List;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/models/list.js\n// module id = 1\n// module chunks = 0","const express = require('express');\r\nconst User = require('../models/user');\r\nconst router = express.Router();\r\nconst jsonParser = require('body-parser').json();\r\n\r\nrouter.post('/authenticated', jsonParser, function (req, res) {\r\n     if (req.session && req.session.authenticated) {\r\n        res.sendStatus(200);\r\n     } else {\r\n        res.sendStatus(401);\r\n     }\r\n});\r\n\r\n\r\nrouter.post('/login', jsonParser, function (req, res) {\r\n    processAuthentication(req)\r\n        .then(() =>  res.sendStatus(200))\r\n        .catch(() => res.sendStatus(401))\r\n});\r\n\r\nfunction processAuthentication(request) {\r\n    let password = request.body.p;\r\n    return new Promise((resolve, reject) => {\r\n        if (validFormat(password) && User.authenticate(password)) {\r\n            request.session.authenticated = true;\r\n            resolve();\r\n        } else {\r\n            request.session.authenticated = false;\r\n            reject();\r\n        }\r\n\r\n        function validFormat(password) {\r\n            return typeof password === \"string\"\r\n        }\r\n    });\r\n}\r\n\r\nfunction authGuard(req, res, next) {\r\n    if (req.session && req.session.authenticated) {\r\n        next();\r\n    } else {\r\n        res.sendStatus(401);\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    router: router,\r\n    guard: authGuard\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/routes/auth.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"compression\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"compression\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 4\n// module chunks = 0","const compression = require('compression');\r\n\r\nconst config = {\r\n    compression: { \r\n        filter: compressOnlyUncompressed \r\n    },\r\n    port: process.env.PORT || 3000,\r\n    session: {\r\n        cookie: {\r\n            maxAge: 60 * 60 * 1000,\r\n            httpOnly: false\r\n        },\r\n        name: '_sid',\r\n        secret: '7214N-46X41-89H16',\r\n        resave: true,\r\n        saveUninitialized: true\r\n    }\r\n};\r\n\r\nfunction compressOnlyUncompressed(req, res) {\r\n    if (res.getHeader('Content-Encoding') === 'gzip') {\r\n        return false;\r\n    }\r\n    return compression.filter(req, res);\r\n}\r\n\r\n\r\nmodule.exports = config;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/config.js\n// module id = 5\n// module chunks = 0","const express = require('express');\nconst router = express.Router();\nconst auth = require('./auth');\nconst jsonParser = require('body-parser').json();\nconst List = require('../models/list');\n\n/**\n * Route items and provide socket.io to all routes\n * @param {*} io socket.io instance \n */\nfunction routeItems(io) {\n\n    router\n        .get('/', function (req, res) {\n            res.redirect('../');\n        })\n        .post('/', auth.guard, function (req, res) {\n            let data = List.getList().then(results => {\n                res.send(results);\n            });\n        })\n        .post('/reserve/:id', auth.guard, jsonParser, function (req, res) {\n            processReservationAction(req, res, List.reserveItem);\n        })\n        .post('/unreserve/:id', auth.guard, jsonParser, function (req, res) {\n            processReservationAction(req, res, List.unreserveItem);\n        });\n\n    function processReservationAction(req, res, action) {\n        let token = validateToken(req.body.token);\n        let id = req.params['id'];\n        if (!token || !id) {\n            failed(List.errors.TOKEN_OR_ID_MISSING, res);\n        } else {\n            try {\n                action(id, token, response => updated(response, res), error => failed(error, res));\n            } catch (exception) {\n                failed(exception.message, res);\n            }\n        }\n    }\n\n    function validateToken(rawToken) {\n        let _token = rawToken.slice(0, 15);\n        return _token;\n    }\n\n    function failed(message, res) {\n        res.status(500).send({\n            status: 500,\n            message: message\n        });\n    }\n\n    function updated(update, res) {\n        io.emit('list_update', { items: update.items });\n        res.status(200).send({\n            status: 200,\n            message: update.item\n        })\n    }\n\n    return router;\n}\n\nmodule.exports = routeItems;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/routes/items.js\n// module id = 6\n// module chunks = 0","module.exports = require(\"express-session\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-session\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"express-static-gzip\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"express-static-gzip\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"socket.io\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"socket.io\"\n// module id = 9\n// module chunks = 0","module.exports = {\n\t\"items\": [\n\t\t{\n\t\t\t\"id\": \"item_001\",\n\t\t\t\"image\": {\n\t\t\t\t\"url\": \"./gift.png\",\n\t\t\t\t\"title\": \"A Demo gift\"\n\t\t\t},\n\t\t\t\"title\": \"Demo gift 1\",\n\t\t\t\"description\": \"A simple gift for testing purposes\",\n\t\t\t\"url\": \"https://www.google.com\",\n\t\t\t\"details\": \"\",\n\t\t\t\"reserved\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"item_002\",\n\t\t\t\"image\": {\n\t\t\t\t\"url\": \"./gift.png\",\n\t\t\t\t\"title\": \"A Demo gift\"\n\t\t\t},\n\t\t\t\"title\": \"Demo gift 2\",\n\t\t\t\"description\": \"A simple gift for testing purposes\",\n\t\t\t\"url\": \"https://www.google.com\",\n\t\t\t\"details\": \"\",\n\t\t\t\"reserved\": false\n\t\t},\n\t\t{\n\t\t\t\"id\": \"item_003\",\n\t\t\t\"image\": {\n\t\t\t\t\"url\": \"./gift.png\",\n\t\t\t\t\"title\": \"A Demo gift\"\n\t\t\t},\n\t\t\t\"title\": \"Demo gift 3\",\n\t\t\t\"description\": \"A simple gift for testing purposes\",\n\t\t\t\"url\": \"https://www.google.com\",\n\t\t\t\"details\": \"\",\n\t\t\t\"reserved\": false\n\t\t}\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/content.json\n// module id = 10\n// module chunks = 0","const express = require('express');\r\nconst app = express();\r\nconst auth = require('./routes/auth');\r\nconst session = require('express-session');\r\nconst gzipStatic = require(\"express-static-gzip\");\r\nconst compression = require('compression');\r\nconst config = require('./config');\r\nconst List = require('./models/list');\r\n\r\nList.ready().then(() => {\r\n    const server = createServer();\r\n    const io = require('socket.io').listen(server);\r\n    extendRoutes();\r\n    console.log(\"Server started successfully\");\r\n\r\n    function createServer() {\r\n        return app\r\n            .use(session(config.session))\r\n            .use(compression(config.compression))\r\n            .use('/', gzipStatic('dist'))\r\n            .use('/user', auth.router)\r\n            .listen(config.port);\r\n    }\r\n\r\n    function extendRoutes() {\r\n        return app\r\n            .use('/items', require('./routes/items')(io.sockets))\r\n            .use((req, res) => res.status(404).sendFile('404.html', { root: __dirname }));\r\n    }\r\n\r\n}).catch(error => console.log(\"Error while creating list\", error.toString()))\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/index.js\n// module id = 11\n// module chunks = 0","const pg = require('pg');\r\nconst format = require('pg-format');\r\nconst CREATE_TABLE = 'CREATE TABLE IF NOT EXISTS items(id VARCHAR(10) PRIMARY KEY, title VARCHAR(1024), description TEXT, url VARCHAR(2083), reserved BOOLEAN, token VARCHAR(15), image VARCHAR(2083))';\r\n\r\nlet defaultContent = require('../content.json');\r\n\r\nclass Storage {\r\n    constructor() {\r\n        if (process.env.DATABASE_URL) {\r\n            pg.defaults.ssl = true;\r\n        }\r\n    }\r\n\r\n    static connect() {\r\n        return new Promise((resolve, reject) => {\r\n            pg.connect(process.env.DATABASE_URL || 'postgres://localhost:5432', (error, client, done) => {\r\n                if (error) {\r\n                    reject(error);\r\n                } else {\r\n                    resolve({ client: client, done: done });\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    static init(callback) {\r\n        return new Promise((resolve, reject) => {\r\n            Storage.connect().then(connection => {\r\n                connection.client.query(CREATE_TABLE, (error, results) => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        let items = [];\r\n                        let query = connection.client.query('SELECT * FROM items');\r\n                        query.on('row', row => items.push(row));\r\n                        query.on('end', () => {\r\n                            if (items.length === 0) {\r\n                                console.log(\"ITEMS: Inserting default data\");\r\n                                let query = getQuery();\r\n                                connection.client.query(query, (error, result) => {\r\n                                    connection.done();\r\n                                    if (error) {\r\n                                        reject(error);\r\n                                    } else {\r\n                                        resolve(result);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                connection.done();\r\n                                resolve();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            })\r\n\r\n            function getQuery() {\r\n                let values = defaultContent.items.map(item => ([\r\n                    item.id,\r\n                    item.image.url,\r\n                    item.title,\r\n                    item.description,\r\n                    item.url,\r\n                    '',\r\n                    item.reserved\r\n                ]));\r\n                return format('INSERT INTO items(id, image, title, description, url, token, reserved) VALUES %L', values);\r\n            }\r\n        })\r\n    }\r\n\r\n    static get() {\r\n        return new Promise((resolve, reject) => {\r\n            Storage.connect()\r\n                .then((connection) => {\r\n                    let results = [];\r\n                    let query = connection.client.query('SELECT * FROM items ORDER BY id ASC');\r\n                    query.on('row', (row) => results.push(row));\r\n                    query.on('end', () => {\r\n                        connection.done();\r\n                        resolve(results);\r\n                    });\r\n                })\r\n                .catch(error => reject(error));\r\n        });\r\n    }\r\n\r\n    static updateReservation(id, token, status) {\r\n        return new Promise((resolve, reject) => {\r\n            Storage.connect()\r\n                .then(connection => {\r\n                    let items = [];\r\n                    console.log(\"Saving item \", id, token, status);\r\n                    connection.client.query('UPDATE items SET reserved=($1), token=($2) WHERE id=($3)', [status, token, id]);\r\n                    let query = connection.client.query('SELECT * FROM items ORDER BY id ASC');\r\n                    query.on('row', row => items.push(row));\r\n                    query.on('end', () => {\r\n                        connection.done();\r\n                        resolve(items);\r\n                    });\r\n\r\n                })\r\n                .catch(error => reject(error));\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Storage;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/models/storage.js\n// module id = 12\n// module chunks = 0","const ACCESS_TOKEN = process.env.ACCESS_TOKEN || \"demo\";\r\n\r\nclass User {\r\n\r\n    static authenticate(password) {\r\n        return password === ACCESS_TOKEN;\r\n    }\r\n}\r\n\r\nmodule.exports = User;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/server/models/user.js\n// module id = 13\n// module chunks = 0","module.exports = require(\"pg\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pg\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"pg-format\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"pg-format\"\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}